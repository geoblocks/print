{"version":3,"file":"demo.6c0c5d40.js","sources":["../../vite/modulepreload-polyfill","../../src/canvasUtils.ts","../../src/encodeutils.ts","../../src/MVTEncoder.ts","../../src/constants.ts","../../src/postcompose.ts","../../src/demo/css.ts","../../src/printer.ts","../../src/demo/demo-app.ts"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","const scratchOpacityCanvas = document.createElement('canvas');\n\nexport function asOpacity(\n  inCanvas: HTMLCanvasElement,\n  opacity: number\n): HTMLCanvasElement {\n  const outCanvas = scratchOpacityCanvas;\n  outCanvas.width = inCanvas.width;\n  outCanvas.height = inCanvas.height;\n  const outCtx = outCanvas.getContext('2d')!;\n  outCtx.globalAlpha = opacity;\n  outCtx.drawImage(inCanvas, 0, 0);\n  return outCanvas;\n}\n","import TileGrid from 'ol/tilegrid/TileGrid.js';\nimport {Extent, getBottomLeft, getHeight, getWidth} from 'ol/extent.js';\nimport {Transform, create, scale, translate} from 'ol/transform.js';\n\n/**\n * Transform coordinates from world projection to canvas pixels.\n * The print extent is in world projection:\n *   - the bottom left is the point where the coordinates are the smaller;\n *   - when going right, x increases;\n *   - when going up, y increases.\n * The canvas is in pixel coordinates:\n *   - the top left is the point where the coorinates are the smaller;\n *   - whg going right, x increases;\n *   - when going down, y increases.\n * @param renderExtent The extent to render\n * @param width\n * @param height\n * @return the transform\n */\nexport function createWorldToVectorContextTransform(\n  renderExtent: Extent,\n  width: number,\n  height: number\n): Transform {\n  const tr = create();\n  const originRT = getBottomLeft(renderExtent);\n  const eWidth = getWidth(renderExtent);\n  const eHeight = getHeight(renderExtent);\n  const r1 = eWidth / eHeight;\n  const r2 = width / height;\n  console.assert(\n    Math.abs(r1 / r2 - 1) < 0.01,\n    `extent and canvas don't have same ratio: ${r1}, ${r2}`\n  );\n  // mind that transforms are created in reverse order\n\n  // we start with the action to do last: flipping the origin of y (due to CSS coordinate system)\n  translate(tr, 0, height);\n  // have it scaled so that the rendered extent fit in the target canvas\n  scale(\n    tr,\n    width / eWidth,\n    -height / eHeight // we multiply by -1 due to CSS coordinate system\n  );\n  // have bottom-left be [0,0]\n  translate(tr, -originRT[0], -originRT[1]);\n  return tr;\n}\n\ninterface CoordExtent {\n  coord: import('ol/tilecoord.js').TileCoord;\n  extent: import('ol/extent.js').Extent;\n}\n\nexport function listTilesCoveringExtentAtResolution(\n  printExtent: Extent,\n  printResolution: number,\n  tileGrid: TileGrid\n): CoordExtent[] {\n  const z = tileGrid.getZForResolution(printResolution, 0.01);\n  // const tileResolution = tileGrid.getResolutions()[z];\n  const tiles: CoordExtent[] = [];\n  tileGrid.forEachTileCoord(printExtent, z, (coord) => {\n    const tileExtent = tileGrid.getTileCoordExtent(coord);\n    tiles.push({\n      coord,\n      extent: tileExtent,\n    });\n  });\n  return tiles;\n}\n","import CanvasImmediateRenderer from 'ol/render/canvas/Immediate.js';\nimport RenderFeature from 'ol/render/Feature.js';\nimport Style, {StyleFunction} from 'ol/style/Style.js';\nimport VectorTileLayer from 'ol/layer/VectorTile.js';\nimport {\n  Extent,\n  getHeight as getExtentHeight,\n  getWidth as getExtentWidth,\n} from 'ol/extent.js';\nimport {MVT} from 'ol/format.js';\n\nimport {Size} from 'ol/size.js';\nimport {Transform} from 'ol/transform.js';\nimport {asOpacity} from './canvasUtils';\nimport {\n  createWorldToVectorContextTransform,\n  listTilesCoveringExtentAtResolution,\n} from './encodeutils';\nimport {renderFeature} from 'ol/renderer/vector.js';\nimport {toContext} from 'ol/render.js';\nimport {transform2D} from 'ol/geom/flat/transform.js';\n\nimport CanvasBuilderGroup from 'ol/render/canvas/BuilderGroup.js';\nimport CanvasExecutorGroup from 'ol/render/canvas/ExecutorGroup.js';\nimport RBush from 'rbush';\nimport TileGrid from 'ol/tilegrid/TileGrid';\n\n/**\n * Simple proxy to the fetch function for now.\n * Can be updated later to limit the number of concurrent requests.\n * Can be made to work on stub for testing.\n */\nexport class PoolDownloader {\n  fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n    return typeof fetch !== 'undefined'\n      ? fetch(input, init)\n      : Promise.reject('no Fetch');\n  }\n}\n\nconst pool = new PoolDownloader();\nconst mvtFormat = new MVT();\n\nexport interface PrintEncodeOptions {\n  /**\n   * The resolution of the output canvas (OpenLayers resolution).\n   * You should provide this value if you have a requirement on the output size of the canvas.\n   */\n  canvasResolution?: number;\n  /**\n   * The resolution to use for retrieving the PBF files (OpenLayers resolution).\n   * This will directly impact the quantity of details.\n   */\n  tileResolution?: number;\n  /**\n   * The resolution to use for styling the features (OpenLayers resolution).\n   * This is the one passed to the style function.\n   */\n  styleResolution?: number;\n  /**\n   * The resolution of the view (OpenLayers resolution, typically the view resolution)\n   */\n  monitorResolution?: number;\n  /**\n   * The resolution of the monitor. Defaults to 96 DPI.\n   */\n  monitorDPI?: number;\n  /**\n   * The resolution of the printer. Defaults to 254 DPI.\n   */\n  paperDPI?: number;\n}\n\ninterface PrintResult {\n  extent: Extent;\n  baseURL: string;\n}\n\ninterface ToDraw {\n  zIndex: number | undefined;\n  feature: RenderFeature;\n  naturalOrder: number;\n  styleIdx: number;\n}\n\ninterface RenderTile {\n  printExtent: Extent;\n}\n\ninterface _FeatureExtent {\n  features: RenderFeature[];\n  extent: Extent;\n  url: string;\n}\n\n/**\n * Encode an OpenLayers MVT layer to a list of canvases.\n */\nexport default class MVTEncoder {\n  static useImmediateAPI = false;\n\n  /**\n   * @param featuresExtent A list of features to render (in world coordinates)\n   * @param styleFunction The style function for the features\n   * @param styleResolution The resolution used in the style function\n   * @param coordinateToPixelTransform World to CSS coordinates transform (top-left is 0)\n   * @param context\n   * @param renderBuffer\n   * @param declutterTree\n   */\n  private drawFeaturesToContextUsingRenderAPI_(\n    featuresExtent: _FeatureExtent,\n    styleFunction: StyleFunction,\n    styleResolution: number,\n    coordinateToPixelTransform: Transform,\n    context: CanvasRenderingContext2D,\n    renderBuffer: number,\n    declutterTree?: RBush<any>\n  ) {\n    const pixelRatio = 1;\n    const builderGroup = new CanvasBuilderGroup(\n      0,\n      featuresExtent.extent,\n      styleResolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup: CanvasBuilderGroup | undefined;\n    if (declutterTree) {\n      declutterBuilderGroup = new CanvasBuilderGroup(\n        0,\n        featuresExtent.extent,\n        styleResolution,\n        pixelRatio\n      );\n    }\n\n    function resourceLoadedListener() {\n      console.log(\n        'FIXME: some resource is now available, we should regenerate the image'\n      );\n    }\n\n    /**\n     * @param feature\n     * @this {CanvasVectorTileLayerRenderer}\n     */\n    const localRenderFeature = function (feature: RenderFeature): boolean {\n      let styles: Style[] | Style | undefined | void;\n      const sf = feature.getStyleFunction() || styleFunction;\n      if (sf) {\n        styles = sf(feature, styleResolution);\n      }\n      let loading = false;\n      if (styles) {\n        if (!Array.isArray(styles)) {\n          styles = [styles];\n        }\n        const tolerance = 0;\n        for (const style of styles) {\n          loading =\n            renderFeature(\n              builderGroup,\n              feature,\n              style,\n              tolerance,\n              resourceLoadedListener,\n              undefined,\n              declutterBuilderGroup\n            ) || loading;\n        }\n      }\n      return loading;\n    };\n\n    let loading = false;\n    featuresExtent.features.forEach((f) => {\n      loading = localRenderFeature(f) || loading;\n    });\n\n    if (loading) {\n      console.log('FIXME: some styles are still loading');\n    }\n\n    const sourceHasOverlaps = true; // we don't care about performance\n    const executorGroupInstructions = builderGroup.finish();\n    const renderingExecutorGroup = new CanvasExecutorGroup(\n      featuresExtent.extent,\n      styleResolution,\n      pixelRatio,\n      sourceHasOverlaps,\n      executorGroupInstructions,\n      renderBuffer\n    );\n    const scale = 1;\n    const transform = coordinateToPixelTransform;\n    const viewRotation = 0;\n    const snapToPixel = true;\n\n    renderingExecutorGroup.execute(\n      context,\n      scale,\n      transform,\n      viewRotation,\n      snapToPixel,\n      undefined,\n      null // we don't want to declutter the base layer\n    );\n    if (declutterBuilderGroup) {\n      const declutterExecutorGroup = new CanvasExecutorGroup(\n        featuresExtent.extent,\n        styleResolution,\n        pixelRatio,\n        sourceHasOverlaps,\n        declutterBuilderGroup.finish(),\n        renderBuffer\n      );\n      declutterExecutorGroup.execute(\n        context,\n        scale,\n        transform,\n        viewRotation,\n        snapToPixel,\n        undefined,\n        declutterTree\n      );\n    }\n  }\n\n  /**\n   *\n   * @param features A list of features to render (in world coordinates)\n   * @param styleFunction The style function for the features\n   * @param styleResolution The resolution used in the style function\n   * @param coordinateToPixelTransform World to CSS coordinates transform (top-left is 0)\n   * @param vectorContext\n   */\n  private drawFeaturesToContextUsingImmediateAPI_(\n    features: RenderFeature[],\n    styleFunction: StyleFunction,\n    styleResolution: number,\n    coordinateToPixelTransform: Transform,\n    vectorContext: CanvasImmediateRenderer\n  ) {\n    const toDraw: ToDraw[] = [];\n    let i = 0;\n    features.forEach((f) => {\n      const styles = styleFunction(f, styleResolution);\n      if (styles) {\n        if (!Array.isArray(styles)) {\n          toDraw.push({\n            zIndex: styles.getZIndex(),\n            feature: f,\n            naturalOrder: ++i,\n            styleIdx: -1,\n          });\n        } else {\n          styles.forEach((style, sIdx) => {\n            toDraw.push({\n              zIndex: style.getZIndex(),\n              feature: f,\n              naturalOrder: ++i,\n              styleIdx: sIdx,\n            });\n          });\n        }\n      }\n    });\n\n    // sort is stable for newer browsers\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description\n    // for security we handle the stability ourself\n    toDraw.sort((a, b) => {\n      const r = (a.zIndex || 0) - (b.zIndex || 0);\n      return r || a.naturalOrder - b.naturalOrder;\n    });\n\n    // In order to honour zIndex we do drawing in 2 steps:\n    // - first we create a list of geometries + style to render and order it by zIndex\n    // - then we re-apply the style and draw.\n    // We can not simply keep a reference to the style because they are mutable: some styles are reused\n    // for several features and the value would be overwritten otherwise.\n    for (const item of toDraw) {\n      const styles = styleFunction(item.feature, styleResolution);\n      const style = item.styleIdx === -1 ? styles : styles[item.styleIdx];\n      vectorContext.setStyle(style);\n\n      // Keep it simple by systematically getting the geometry either from the style or from the feature\n      // Then the coordinates are transformed\n      let geometry = style.getGeometry();\n      if (typeof geometry === 'function') {\n        geometry = geometry();\n      }\n      if (!geometry) {\n        geometry = item.feature.getGeometry();\n      }\n\n      // poor man copy\n      geometry = Object.assign(\n        Object.create(Object.getPrototypeOf(geometry)),\n        geometry\n      );\n      // FIXME: can we avoid accessing private properties?\n      const inCoos = geometry['flatCoordinates_'];\n      const outCoos = (geometry['flatCoordinates_'] = new Array(inCoos.length));\n      const stride = geometry.getStride();\n      transform2D(\n        inCoos,\n        0,\n        inCoos.length,\n        stride,\n        coordinateToPixelTransform,\n        outCoos\n      );\n\n      // Finally draw the feature with previously set style\n      vectorContext.drawGeometry(geometry);\n    }\n  }\n\n  /**\n   * Adjust size of the canvas and wrap it into the OL immediate API.\n   * @param canvas The canvas to render to\n   * @param targetExtent The extent for this canvas, in world coordinates\n   * @param resolution The resolution for this canvas (will influence the size of the canvas)\n   */\n  createRenderContext(\n    canvas: HTMLCanvasElement,\n    targetExtent: Extent,\n    resolution: number\n  ): CanvasImmediateRenderer {\n    const width = getExtentWidth(targetExtent) / resolution;\n    const height = getExtentHeight(targetExtent) / resolution;\n    const size: Size = [width, height];\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error(\n        `Could not get the context ${canvas.width}x${canvas.height}, expected ${width}x${height})`\n      );\n    }\n    const vectorContext = toContext(ctx, {\n      size,\n      pixelRatio: 1,\n    });\n    return vectorContext;\n  }\n\n  snapTileResolution(tileGrid: TileGrid, targetResolution: number): number {\n    const resolutions = tileGrid.getResolutions();\n    let resolution = resolutions[resolutions.length - 2]; // the last one is exclusive?\n    for (let i = resolutions.length - 2; i >= 0; i--) {\n      const r = resolutions[i];\n      if (r <= targetResolution) {\n        resolution = r;\n      } else {\n        break;\n      }\n    }\n    return resolution;\n  }\n\n  /**\n   *\n   * @param layer The VectorTileLayer to rasterize\n   * @param defaultResolution The resolution to fallback when specific resolution is not available in options\n   * @param printExtent The extent that should be printed (in map coordinates)\n   * @param options Extra options\n   */\n  async encodeMVTLayer(\n    layer: VectorTileLayer,\n    defaultResolution: number,\n    printExtent: Extent,\n    options: PrintEncodeOptions = {}\n  ): Promise<PrintResult[]> {\n    const renderBuffer = layer.getRenderBuffer() ?? 100;\n    const source = layer.getSource();\n    const projection = source.getProjection();\n    const tileGrid = source.getTileGrid();\n    const monitorResolution = options.monitorResolution || defaultResolution;\n    const targetResolution = options.tileResolution || monitorResolution;\n    const tileResolution = this.snapTileResolution(tileGrid, targetResolution);\n    const mvtTiles = listTilesCoveringExtentAtResolution(\n      printExtent,\n      tileResolution,\n      tileGrid\n    );\n\n    const urlFunction = source.getTileUrlFunction();\n    const featuresPromises = mvtTiles.map((t) => {\n      // pixelratio and projection are not used\n      const url = urlFunction(t.coord, 1, projection);\n      if (!url) {\n        return Promise.reject('Could not create URL');\n      }\n      return pool\n        .fetch(url)\n        .then((r) => r.arrayBuffer())\n        .then((data) => {\n          const features = mvtFormat.readFeatures(data, {\n            extent: t.extent,\n            featureProjection: projection,\n          }) as RenderFeature[];\n          return {\n            features,\n            extent: t.extent,\n            url,\n          } as _FeatureExtent;\n        });\n    });\n\n    const featuresAndExtents = (await Promise.allSettled(featuresPromises))\n      .filter((r) => r.status === 'fulfilled')\n      .map((r) => (r as PromiseFulfilledResult<_FeatureExtent>).value);\n\n    // TODO:\n    // decide on a reasonable number of paving tiles for the rendering\n    // this depends on the size of the tiles in pixels.\n    // This will be necessary when working with A0 or such big outputs.\n    const renderTiles: RenderTile[] = [\n      {\n        printExtent, // print extent\n      },\n    ];\n\n    // By default we want 254 DPI on paper VS 96 DPI on the display\n    const paperDPI = options.paperDPI || 254;\n    const monitorDPI = options.monitorDPI || 96;\n    const rtResolution =\n      options.canvasResolution || (monitorDPI / paperDPI) * monitorResolution;\n    const styleResolution = options.styleResolution || tileResolution;\n    const layerStyleFunction = layer.getStyleFunction()!; // there is always a default one\n    const layerOpacity = layer.get('opacity');\n\n    const decluterTree = layer.getDeclutter() ? new RBush<any>(9) : undefined;\n\n    // render to these tiles;\n    const encodedLayers = renderTiles.map((rt) =>\n      this.renderTile(\n        featuresAndExtents,\n        rt.printExtent,\n        rtResolution,\n        styleResolution,\n        layerStyleFunction,\n        layerOpacity,\n        renderBuffer,\n        decluterTree\n      )\n    );\n    return encodedLayers;\n  }\n\n  renderTile(\n    featuresExtents: _FeatureExtent[],\n    rtExtent: Extent,\n    rtResolution: number,\n    styleResolution: number,\n    layerStyleFunction: StyleFunction,\n    layerOpacity: number,\n    renderBuffer: number,\n    decluterTree?: RBush<any>\n  ): PrintResult {\n    const canvas = document.createElement('canvas');\n    const vectorContext = this.createRenderContext(\n      canvas,\n      rtExtent,\n      rtResolution\n    );\n    const ctx = canvas.getContext('2d');\n\n    featuresExtents.forEach((ft) => {\n      const transform = createWorldToVectorContextTransform(\n        rtExtent,\n        canvas.width,\n        canvas.height\n      );\n      if (MVTEncoder.useImmediateAPI) {\n        this.drawFeaturesToContextUsingImmediateAPI_(\n          ft.features,\n          layerStyleFunction,\n          styleResolution,\n          transform,\n          vectorContext\n        );\n      } else {\n        this.drawFeaturesToContextUsingRenderAPI_(\n          ft,\n          layerStyleFunction,\n          styleResolution,\n          transform,\n          ctx!,\n          renderBuffer,\n          decluterTree\n        );\n      }\n    });\n\n    const baseUrl = (\n      layerOpacity === 1 ? canvas : asOpacity(canvas, layerOpacity)\n    ).toDataURL('PNG');\n    return {\n      extent: rtExtent,\n      baseURL: baseUrl,\n    };\n  }\n}\n","/**\n * @const {number}\n */\nexport const PDF_POINTS_PER_INCH = 72;\n\n/**\n * @const {number}\n * According to the \"international yard\" definition 1 inch is defined as exactly 2.54 cm.\n */\nexport const METERS_PER_INCH = 0.0254;\n\n/**\n * @const {number}\n */\nexport const PDF_POINTS_PER_METER = PDF_POINTS_PER_INCH / METERS_PER_INCH;\n\n/**\n * This depends on the print DPI.\n * At DPI=254 we have DPI / METERS_PER_INCH = 254 / 0.0254 = 10^4\n */\nexport const PIXELS_PER_METER = 10000;\n","import Map from 'ol/Map';\nimport RenderEvent from 'ol/render/Event';\nimport {Extent} from 'ol/extent';\n\nexport function computePrintPosition(\n  dimensions: number[],\n  viewportWidth: number,\n  viewportHeight: number\n): Extent {\n  const centerX = viewportWidth / 2;\n  const centerY = viewportHeight / 2;\n\n  const [paperSizePixelWidth, paperSizePixelHeight] = dimensions;\n  const minX = centerX - paperSizePixelWidth / 2;\n  const minY = centerY - paperSizePixelHeight / 2;\n  return [minX, minY, minX + paperSizePixelWidth, minY + paperSizePixelHeight];\n}\n\nexport function drawPaperDimensions(\n  event: RenderEvent,\n  dimensions: number[]\n): void {\n  const viewport = (event.target as Map).getViewport();\n  const canvases = viewport.getElementsByTagName('canvas');\n\n  const frameState = event.frameState!;\n  const viewportWidth = Number(\n    (frameState.size[0] * frameState.pixelRatio).toFixed()\n  );\n  const viewportHeight = Number(\n    (frameState.size[1] * frameState.pixelRatio).toFixed()\n  );\n\n  for (let i = canvases.length - 1; i >= 0; i--) {\n    // layer creates new canvas on high resolution devices\n    const canvas = canvases.item(i)!;\n    const context = canvas.getContext('2d')!;\n\n    if (canvas.width === viewportWidth && canvas.height === viewportHeight) {\n      // checks for correct canvas\n      const printPosition = computePrintPosition(\n        dimensions,\n        viewportWidth,\n        viewportHeight\n      );\n\n      context.beginPath();\n\n      // outer rectangle\n      context.rect(0, 0, viewportWidth, viewportHeight);\n\n      // inner rectangle\n      context.rect(\n        printPosition[0],\n        printPosition[1],\n        dimensions[0],\n        dimensions[1]\n      );\n\n      context.fillStyle = 'rgba(0, 5, 25, 0.15)';\n      context.fill('evenodd');\n      break; // extent should be added only for a newest canvas\n    }\n  }\n}\n","import {css} from 'lit';\n\nexport const olCss = css`\n  .ol-control {\n    position: absolute;\n    background-color: rgba(255, 255, 255, 0.4);\n    border-radius: 4px;\n    padding: 2px;\n  }\n  .ol-control:hover {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n  .ol-zoom {\n    top: 0.5em;\n    left: 0.5em;\n  }\n  .ol-control button {\n    display: block;\n    margin: 1px;\n    padding: 0;\n    color: white;\n    font-size: 1.14em;\n    font-weight: bold;\n    text-decoration: none;\n    text-align: center;\n    height: 1.375em;\n    width: 1.375em;\n    line-height: 0.4em;\n    background-color: rgba(0, 60, 136, 0.5);\n    border: none;\n    border-radius: 2px;\n  }\n  .ol-control button::-moz-focus-inner {\n    border: none;\n    padding: 0;\n  }\n  .ol-rotate {\n    top: 0.5em;\n    right: 0.5em;\n    transition: opacity 0.25s linear, visibility 0s linear;\n  }\n  .ol-rotate.ol-hidden {\n    opacity: 0;\n    visibility: hidden;\n    transition: opacity 0.25s linear, visibility 0s linear 0.25s;\n  }\n  .ol-attribution li {\n    display: inline;\n    list-style: none;\n  }\n  .ol-attribution li:not(:last-child):after {\n    content: ' ';\n  }\n  .ol-attribution img {\n    max-height: 2em;\n    max-width: inherit;\n    vertical-align: middle;\n  }\n  .ol-attribution button {\n    flex-shrink: 0;\n  }\n  .ol-attribution.ol-collapsed ul {\n    display: none;\n  }\n  .ol-attribution:not(.ol-collapsed) {\n    background: rgba(255, 255, 255, 0.8);\n  }\n  .ol-attribution.ol-uncollapsible {\n    bottom: 0;\n    right: 0;\n    border-radius: 4px 0 0;\n  }\n  .ol-attribution.ol-uncollapsible img {\n    margin-top: -0.2em;\n    max-height: 1.6em;\n  }\n  .ol-attribution.ol-uncollapsible button {\n    display: none;\n  }\n  .ol-viewport,\n  .ol-unselectable {\n    user-select: none;\n  }\n  .ol-selectable {\n    user-select: text;\n  }\n`;\n","export const printerIcon = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg\n    xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:cc=\"http://web.resource.org/cc/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n    xmlns:sodipodi=\"http://inkscape.sourceforge.net/DTD/sodipodi-0.dtd\"\n    xmlns:svg=\"http://www.w3.org/2000/svg\"\n    xmlns:ns1=\"http://sozi.baierouge.fr\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    id=\"svg1468\"\n    sodipodi:docname=\"printer1.svg\"\n    viewBox=\"0 0 187.5 187.5\"\n    sodipodi:version=\"0.32\"\n    version=\"1.0\"\n    y=\"0\"\n    x=\"0\"\n    inkscape:version=\"0.42\"\n  >\n  <sodipodi:namedview\n      id=\"base\"\n      bordercolor=\"#666666\"\n      inkscape:pageshadow=\"2\"\n      inkscape:window-width=\"704\"\n      pagecolor=\"#ffffff\"\n      inkscape:zoom=\"1.8346667\"\n      inkscape:window-x=\"66\"\n      borderopacity=\"1.0\"\n      inkscape:current-layer=\"svg1468\"\n      inkscape:cx=\"93.750000\"\n      inkscape:cy=\"93.750000\"\n      inkscape:window-y=\"66\"\n      inkscape:window-height=\"510\"\n      inkscape:pageopacity=\"0.0\"\n  />\n  <g\n      id=\"layer1\"\n    >\n    <g\n        id=\"g2388\"\n        transform=\"translate(-527.55 -379)\"\n      >\n      <rect\n          id=\"rect2352\"\n          style=\"stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:3.1212;fill:#ffffff\"\n          rx=\"10\"\n          ry=\"10\"\n          height=\"58.321\"\n          width=\"145.8\"\n          y=\"448.86\"\n          x=\"547.3\"\n      />\n      <rect\n          id=\"rect2356\"\n          style=\"stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:3.1212;fill:#ffffff\"\n          height=\"39.464\"\n          width=\"87.326\"\n          y=\"498.72\"\n          x=\"576.54\"\n      />\n      <path\n          id=\"path2358\"\n          style=\"stroke:#000000;stroke-linecap:round;stroke-width:4.0576;fill:none\"\n          d=\"m561.88 468.75h115.32\"\n      />\n      <rect\n          id=\"rect2360\"\n          style=\"stroke-linejoin:round;stroke:#000000;stroke-linecap:round;stroke-width:3.1212;fill:#ffffff\"\n          height=\"44.549\"\n          width=\"87.482\"\n          y=\"404.06\"\n          x=\"576.46\"\n      />\n      <path\n          id=\"path2362\"\n          style=\"stroke:#000000;stroke-width:2.0808;fill:none\"\n          d=\"m587.07 527.07h66.27\"\n      />\n      <path\n          id=\"path2364\"\n          style=\"stroke:#000000;stroke-width:2.0808;fill:none\"\n          d=\"m587.07 520.44h66.27\"\n      />\n      <path\n          id=\"path2366\"\n          style=\"stroke:#000000;stroke-width:2.0808;fill:none\"\n          d=\"m587.07 513.81h66.27\"\n      />\n      <path\n          id=\"path2368\"\n          style=\"stroke:#000000;stroke-width:2.0808;fill:none\"\n          d=\"m587.07 507.19h66.27\"\n      />\n    </g\n    >\n  </g\n  >\n  <metadata\n    >\n    <rdf:RDF\n      >\n      <cc:Work\n        >\n        <dc:format\n          >image/svg+xml</dc:format\n        >\n        <dc:type\n            rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"\n        />\n        <cc:license\n            rdf:resource=\"http://creativecommons.org/licenses/publicdomain/\"\n        />\n        <dc:publisher\n          >\n          <cc:Agent\n              rdf:about=\"http://openclipart.org/\"\n            >\n            <dc:title\n              >Openclipart</dc:title\n            >\n          </cc:Agent\n          >\n        </dc:publisher\n        >\n        <dc:title\n          >Printer icon</dc:title\n        >\n        <dc:date\n          >2006-12-26T00:00:00</dc:date\n        >\n        <dc:description\n        />\n        <dc:source\n          >https://openclipart.org/detail/24825/-by--24825</dc:source\n        >\n        <dc:creator\n          >\n          <cc:Agent\n            >\n            <dc:title\n              >Anonymous</dc:title\n            >\n          </cc:Agent\n          >\n        </dc:creator\n        >\n      </cc:Work\n      >\n      <cc:License\n          rdf:about=\"http://creativecommons.org/licenses/publicdomain/\"\n        >\n        <cc:permits\n            rdf:resource=\"http://creativecommons.org/ns#Reproduction\"\n        />\n        <cc:permits\n            rdf:resource=\"http://creativecommons.org/ns#Distribution\"\n        />\n        <cc:permits\n            rdf:resource=\"http://creativecommons.org/ns#DerivativeWorks\"\n        />\n      </cc:License\n      >\n    </rdf:RDF\n    >\n  </metadata\n  >\n</svg\n>\n`;\n","import Feature from 'ol/Feature.js';\nimport Geometry from 'ol/geom/Geometry';\nimport Icon from 'ol/style/Icon.js';\nimport MVT from 'ol/format/MVT.js';\nimport MVTEncoder, {PrintEncodeOptions} from '../MVTEncoder';\nimport OLMap from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport Stroke from 'ol/style/Stroke.js';\nimport Style from 'ol/style/Style.js';\nimport Text from 'ol/style/Text.js';\nimport TileDebug from 'ol/source/TileDebug.js';\nimport TileGrid from 'ol/tilegrid/TileGrid.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport VectorLayer from 'ol/layer/Vector.js';\nimport VectorSource from 'ol/source/Vector.js';\nimport VectorTileLayer from 'ol/layer/VectorTile.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport View from 'ol/View.js';\nimport stylefunction from 'ol-mapbox-style/dist/stylefunction.js';\nimport {Extent} from 'ol/extent.js';\nimport {LitElement, TemplateResult, css, html} from 'lit';\nimport {PDF_POINTS_PER_METER} from '../constants';\nimport {computePrintPosition, drawPaperDimensions} from '../postcompose';\nimport {customElement, query, state} from 'lit/decorators.js';\nimport {extentFromProjection} from 'ol/tilegrid.js';\nimport {fromLonLat, toLonLat} from 'ol/proj.js';\nimport {olCss} from './css';\nimport {fromExtent as polygonFromExtent} from 'ol/geom/Polygon.js';\nimport {printerIcon} from '../printer';\nimport {unsafeHTML} from 'lit/directives/unsafe-html.js';\n\nconst defaults = {\n  demo: 'mapbox2',\n  declutter: true,\n  immediateApi: false,\n};\n\n@customElement('demo-app')\nexport class DemoApp extends LitElement {\n  static styles = [\n    css`\n      :host {\n        display: block;\n        border: solid 1px gray;\n        padding: 16px;\n      }\n      #side {\n        background-color: lightgray;\n        display: inline-block;\n      }\n      #print {\n        position: absolute;\n        top: 10em;\n        left: 2.5em;\n        width: 30px;\n        height: 30px;\n      }\n      #map {\n        display: inline-block;\n        width: 45%;\n        height: calc(100vh - 32px - 20px - 40px);\n      }\n    `,\n    olCss,\n  ];\n\n  @query('#map')\n  private mapEl?: HTMLElement;\n\n  private map?: OLMap;\n  private mvtLayer?: VectorTileLayer;\n  private printExtentLayer?: VectorLayer<VectorSource<Geometry>>;\n  private targetSizeInPdfPoints = [510, 710]; // 72pts / inch => ~[18cm, 25cm]\n  private printScale = 1 / 5000;\n\n  @state()\n  private result0;\n\n  @state()\n  private zoom = -1;\n\n  @state()\n  private currentDemo = defaults.demo;\n\n  @state()\n  private shouldDeclutter = defaults.declutter;\n\n  @state()\n  private useImmediateApi = defaults.immediateApi;\n\n  configureVTStyle(layer: VectorTileLayer, url: string): void {\n    fetch(url)\n      .then((r) => r.json())\n      .then((style) => {\n        let spriteUrl, spriteDataUrl, spriteImageUrl, addMpFonts;\n\n        if (style.sprite) {\n          spriteUrl = style.sprite;\n\n          // support relative spriteUrls\n          if (spriteUrl.includes('./')) {\n            spriteUrl = new URL(spriteUrl, url);\n          }\n\n          spriteDataUrl = spriteUrl.toString().concat('.json');\n          spriteImageUrl = spriteUrl.toString().concat('.png');\n\n          fetch(spriteDataUrl)\n            .then((r) => r.json())\n            .then((r) => r.data)\n            .then((spriteData) => {\n              stylefunction(\n                layer,\n                style,\n                Object.keys(style.sources)[0],\n                undefined,\n                spriteData,\n                spriteImageUrl,\n                addMpFonts\n              );\n            });\n        } else {\n          stylefunction(\n            layer,\n            style,\n            Object.keys(style.sources)[0],\n            undefined,\n            undefined,\n            undefined,\n            addMpFonts\n          );\n        }\n      });\n  }\n\n  createMap(): void {\n    this.printExtentLayer = new VectorLayer({\n      // @ts-ignore\n      'name': 'printExtent',\n      source: new VectorSource({\n        features: [],\n      }),\n    });\n    this.map = new OLMap({\n      target: this.mapEl,\n      layers: [],\n      view: new View({\n        zoom: 14,\n      }),\n    });\n    this.shouldDeclutter = defaults.declutter;\n    this.updateDemo(defaults.demo);\n\n    this.map.on('postcompose', (evt) => {\n      const res = evt.frameState!.viewState.resolution;\n      //const printResolution = 1 / PIXELS_PER_METER / this.printScale;\n      drawPaperDimensions(evt, this.getPrintDimensions(res));\n    });\n    this.map.getView().on('change:resolution', () => {\n      this.zoom = this.map?.getView().getZoom() || -1;\n    });\n    this.zoom = this.map?.getView().getZoom() || -1;\n  }\n\n  getPrintDimensions(resolution: number): number[] {\n    return this.targetSizeInPdfPoints.map(\n      (side) =>\n        (side / PDF_POINTS_PER_METER / resolution / this.printScale) *\n        devicePixelRatio\n    );\n  }\n\n  firstUpdated(): void {\n    this.createMap();\n  }\n\n  async print(): Promise<void> {\n    MVTEncoder.useImmediateAPI = this.useImmediateApi;\n    const encoder = new MVTEncoder();\n    const viewResolution = this.map!.getView().getResolution()!;\n    const size = this.map!.getSize()!;\n\n    const pp = computePrintPosition(\n      this.getPrintDimensions(viewResolution),\n      size[0],\n      size[1]\n    );\n    const printExtent: Extent = [\n      ...this.map!.getCoordinateFromPixel([pp[0], pp[3]]),\n      ...this.map!.getCoordinateFromPixel([pp[2], pp[1]]), // top right\n    ] as Extent;\n    this.printExtentLayer?.getSource().clear();\n    this.printExtentLayer?.getSource().addFeature(\n      new Feature({\n        geometry: polygonFromExtent(printExtent),\n      })\n    );\n    const options: PrintEncodeOptions = {\n      canvasResolution: 3, // FIXME: properly compute this number\n    };\n    const result = await encoder.encodeMVTLayer(\n      this.mvtLayer!,\n      viewResolution,\n      printExtent,\n      options\n    );\n    console.log(result);\n    this.result0 = result[0];\n  }\n\n  configureSimpleDemo(): void {\n    this.mvtLayer = new VectorTileLayer({\n      declutter: this.shouldDeclutter,\n      style(feature) {\n        if (feature.getGeometry()?.getType() === 'Point') {\n          return new Style({\n            text: new Text({\n              font: 'bold 28px beach',\n              text: 'beach',\n              offsetY: 40,\n            }),\n            image: new Icon({\n              src: `/beach.svg`,\n              opacity: 0.5,\n              scale: 0.05,\n            }),\n          });\n        }\n        return new Style({\n          stroke: new Stroke({\n            color: 'red',\n          }),\n        });\n      },\n      source: new VectorTileSource({\n        format: new MVT(),\n        url: '/tiles/{z}/{x}/{y}.pbf',\n        maxZoom: 14,\n        // extent: trackExtent,\n      }),\n    });\n\n    const layers = this.map?.getLayers();\n    layers!.clear();\n    const newLayers = [\n      new TileLayer({\n        source: new OSM(),\n      }),\n      this.mvtLayer!,\n      this.printExtentLayer!,\n      new TileLayer({\n        zIndex: 10000,\n        source: new TileDebug({\n          tileGrid: this.mvtLayer.getSource().getTileGrid(),\n        }),\n      }),\n    ];\n    layers!.extend(newLayers);\n    this.map?.getView().setCenter(fromLonLat([6.57253, 46.51336]));\n  }\n\n  configureMapboxDemo1(): void {\n    this.configureMapboxDemo(\n      'https://adv-smart.de/tiles/smarttiles_de_public/{z}/{x}/{y}.pbf',\n      //'https://dev.adv-smart.de/styles/public/v0/de_style_grey.json'\n      'https://adv-smart.de/styles/public/de_style_hillshade.json'\n    );\n  }\n\n  configureMapboxDemo2(): void {\n    this.configureMapboxDemo(\n      'https://adv-smart.de/tiles/smarttiles_de_public_v1/{z}/{x}/{y}.pbf',\n      'https://adv-smart.de/styles/public/de_style_hillshade.json'\n    );\n  }\n\n  configureMapboxDemo(pbfURL: string, styleURL: string): void {\n    const extent = extentFromProjection('EPSG:3857');\n    const origin = [extent[0], extent[3]];\n    this.mvtLayer = new VectorTileLayer({\n      declutter: this.shouldDeclutter,\n      source: new VectorTileSource({\n        format: new MVT(),\n        tileGrid: new TileGrid({\n          tileSize: 512,\n          resolutions: [\n            78271.5169640117238, 39135.7584820058619, 19567.8792410029309,\n            9783.93962050146547, 4891.96981025073273, 2445.98490512536637,\n            1222.99245256268318, 611.496226281341592, 305.7481131406708,\n            152.8740565703354, 76.437028285167699, 38.2185141425838495,\n            19.1092570712919247, 9.55462853564596237, 4.77731426782298119,\n            2.38865713391149059, 1,\n          ],\n          extent: extent,\n          origin: origin,\n        }),\n        url: pbfURL,\n        maxZoom: 14,\n      }),\n    });\n    this.configureVTStyle(this.mvtLayer, styleURL);\n\n    const layers = this.map?.getLayers();\n    layers!.clear();\n    const newLayers = [\n      this.mvtLayer!,\n      this.printExtentLayer!,\n      new TileLayer({\n        zIndex: 10000,\n        source: new TileDebug({\n          tileGrid: this.mvtLayer.getSource().getTileGrid(),\n        }),\n      }),\n    ];\n    layers!.extend(newLayers);\n    this.map?.getView().setCenter(fromLonLat([9.9909, 53.54777]));\n  }\n\n  updateDemo(demo: string): void {\n    this.currentDemo = demo;\n    switch (demo) {\n      case 'simple':\n        this.configureSimpleDemo();\n        break;\n      case 'mapbox1':\n        this.configureMapboxDemo1();\n        break;\n      case 'mapbox2':\n        this.configureMapboxDemo2();\n        break;\n      default:\n    }\n  }\n\n  render(): TemplateResult {\n    let img: TemplateResult | '' = '';\n    let extent: TemplateResult | '' = '';\n    if (this.result0) {\n      const e = this.result0.extent;\n      const c0 = [e[0], e[1]];\n      const c1 = [e[2], e[3]];\n      img = html`<img id=\"side\" src=\"${this.result0.baseURL}\" />`;\n      extent = html`<div>\n        ${JSON.stringify(toLonLat(c0, 'EPSG:3857'))}\n        ${JSON.stringify(toLonLat(c1, 'EPSG:3857'))}\n      </div>`;\n    }\n    return html`\n      <label for=\"demo-select\">Choose a demo:</label>\n      <select\n        name=\"demos\"\n        id=\"demo-select\"\n        .value=\"${this.currentDemo}\"\n        @change=${(evt) => this.updateDemo(evt.target.value)}\n      >\n        <option value=\"simple\">Basic style function</option>\n        <option value=\"mapbox1\">OL-Mapbox-style1</option>\n        <option value=\"mapbox2\">OL-Mapbox-style2</option>\n      </select>\n      <label>\n        <input\n          type=\"checkbox\"\n          ?checked=${this.shouldDeclutter}\n          @change=${(evt) => {\n            this.shouldDeclutter = evt.target.checked;\n            this.updateDemo(this.currentDemo);\n          }}\n        />\n        declutter\n      </label>\n      <label>\n        <input\n          type=\"checkbox\"\n          ?checked=${this.useImmediateApi}\n          @change=${(evt) => {\n            this.useImmediateApi = evt.target.checked;\n          }}\n        />immediate API\n      </label>\n      <div>${extent || 'Move around and click the print button...'}</div>\n      <div>zoom: ${this.zoom.toFixed(1)}</div>\n      <div>\n        <div id=\"map\"></div>\n        ${img}\n      </div>\n      <button id=\"print\" @click=${this.print}>\n        ${unsafeHTML(printerIcon)}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'demo-app': DemoApp;\n  }\n}\n"],"names":["getExtentWidth","getExtentHeight","css","LitElement","polygonFromExtent","html","unsafeHTML","query","state","customElement"],"mappings":"6UAAA,KAAM,IAAI,UAAoB,CAC1B,KAAM,GAAU,SAAS,cAAc,QAAQ,QAC/C,GAAI,GAAW,EAAQ,UAAY,EAAQ,SAAS,iBAChD,OAEJ,SAAW,KAAQ,UAAS,iBAAiB,6BACzC,EAAe,GAEnB,GAAI,kBAAiB,AAAC,GAAc,CAChC,SAAW,KAAY,GACnB,GAAI,EAAS,OAAS,YAGtB,SAAW,KAAQ,GAAS,WACxB,AAAI,EAAK,UAAY,QAAU,EAAK,MAAQ,iBACxC,EAAe,KAG5B,QAAQ,SAAU,CAAE,UAAW,GAAM,QAAS,KACjD,WAAsB,EAAQ,CAC1B,KAAM,GAAY,GAClB,MAAI,GAAO,WACP,GAAU,UAAY,EAAO,WAC7B,EAAO,gBACP,GAAU,eAAiB,EAAO,gBACtC,AAAI,EAAO,cAAgB,kBACvB,EAAU,YAAc,UACvB,AAAI,EAAO,cAAgB,YAC5B,EAAU,YAAc,OAExB,EAAU,YAAc,cACrB,EAEX,WAAwB,EAAM,CAC1B,GAAI,EAAK,GAEL,OACJ,EAAK,GAAK,GAEV,KAAM,GAAY,EAAa,GAC/B,MAAM,EAAK,KAAM,KAEvB,AAAoB,KC1CtB,KAAM,IAAuB,SAAS,cAAc,sBAGlD,EACA,EACmB,MACb,GAAY,KACR,MAAQ,EAAS,QACjB,OAAS,EAAS,YACtB,GAAS,EAAU,WAAW,eAC7B,YAAc,IACd,UAAU,EAAU,EAAG,GACvB,cCQP,EACA,EACA,EACW,MACL,GAAK,IACL,EAAW,EAAc,GACzB,EAAS,EAAS,GAClB,EAAU,EAAU,GACpB,EAAK,EAAS,EACd,EAAK,EAAQ,iBACX,OACN,KAAK,IAAI,EAAK,EAAK,GAAK,IACxB,4CAA4C,MAAO,OAK3C,EAAI,EAAG,KAGf,EACA,EAAQ,EACR,CAAC,EAAS,KAGF,EAAI,CAAC,EAAS,GAAI,CAAC,EAAS,IAC/B,cASP,EACA,EACA,EACe,MACT,GAAI,EAAS,kBAAkB,EAAiB,KAEhD,EAAuB,YACpB,iBAAiB,EAAa,EAAG,AAAC,GAAU,MAC7C,GAAa,EAAS,mBAAmB,KACzC,KAAK,CACT,QACA,OAAQ,MAGL,UCrCmB,CAC1B,MAAM,EAAoB,EAAuC,OACxD,OAAO,QAAU,YACpB,MAAM,EAAO,GACb,QAAQ,OAAO,aAIvB,KAAM,IAAO,GAAI,IACX,GAAY,GAAI,UAyDU,CAYtB,qCACN,EACA,EACA,EACA,EACA,EACA,EACA,EACA,MACM,GAAa,EACb,EAAe,GAAI,GACvB,EACA,EAAe,OACf,EACA,MAGE,GACA,MACsB,GAAI,GAC1B,EACA,EAAe,OACf,EACA,gBAI8B,SACxB,IACN,8EAQE,GAAqB,SAAU,EAAiC,IAChE,QACE,GAAK,EAAQ,oBAAsB,EACrC,MACO,EAAG,EAAS,OAEnB,GAAU,MACV,EAAQ,CACL,MAAM,QAAQ,OACR,CAAC,SAEN,GAAY,WACP,KAAS,KAEhB,GACE,EACA,EACA,EACA,EACA,EACA,OACA,IACG,QAGJ,OAGL,GAAU,KACC,SAAS,QAAQ,AAAC,GAAM,GAC3B,EAAmB,IAAM,IAGjC,WACM,IAAI,6CAGR,GAAoB,GACpB,EAA4B,EAAa,SACzC,EAAyB,GAAI,GACjC,EAAe,OACf,EACA,EACA,EACA,EACA,GAEI,EAAQ,EACR,EAAY,EACZ,EAAe,EACf,EAAc,KAEG,QACrB,EACA,EACA,EACA,EACA,EACA,OACA,MAEE,GAC6B,GAAI,GACjC,EAAe,OACf,EACA,EACA,EACA,EAAsB,SACtB,GAEqB,QACrB,EACA,EACA,EACA,EACA,EACA,OACA,GAaE,wCACN,EACA,EACA,EACA,EACA,EACA,MACM,GAAmB,MACrB,GAAI,IACC,QAAQ,AAAC,GAAM,MAChB,GAAS,EAAc,EAAG,GAC5B,IACG,MAAM,QAAQ,KAQV,QAAQ,CAAC,EAAO,IAAS,GACvB,KAAK,CACV,OAAQ,EAAM,YACd,QAAS,EACT,aAAc,EAAE,EAChB,SAAU,QAZP,KAAK,CACV,OAAQ,EAAO,YACf,QAAS,EACT,aAAc,EAAE,EAChB,SAAU,UAkBX,KAAK,CAAC,EAAG,IAEP,GADM,QAAU,MAAQ,QAAU,IAC7B,EAAE,aAAe,EAAE,uBAQtB,KAAQ,GAAQ,MACnB,GAAS,EAAc,EAAK,QAAS,GACrC,EAAQ,EAAK,WAAa,GAAK,EAAS,EAAO,EAAK,YAC5C,SAAS,MAInB,GAAW,EAAM,cACjB,MAAO,IAAa,eACX,KAER,MACQ,EAAK,QAAQ,iBAIf,OAAO,OAChB,OAAO,OAAO,OAAO,eAAe,IACpC,QAGI,GAAS,EAAS,iBAClB,EAAW,EAAS,iBAAsB,GAAI,OAAM,EAAO,QAC3D,EAAS,EAAS,cAEtB,EACA,EACA,EAAO,OACP,EACA,EACA,KAIY,aAAa,IAU/B,oBACE,EACA,EACA,EACyB,MACnB,GAAQA,EAAe,GAAgB,EACvC,EAASC,EAAgB,GAAgB,EACzC,EAAa,CAAC,EAAO,GACrB,EAAM,EAAO,WAAW,SAC1B,CAAC,OACG,IAAI,OACR,6BAA6B,EAAO,SAAS,EAAO,oBAAoB,KAAS,YAG/D,IAAU,EAAK,CACnC,OACA,WAAY,IAKhB,mBAAmB,EAAoB,EAAkC,MACjE,GAAc,EAAS,oBACzB,GAAa,EAAY,EAAY,OAAS,UACzC,GAAI,EAAY,OAAS,EAAG,GAAK,EAAG,IAAK,MAC1C,GAAI,EAAY,MAClB,GAAK,IACM,mBAKV,QAUH,gBACJ,EACA,EACA,EACA,EAA8B,GACN,MAClB,GAAe,EAAM,mBAAqB,IAC1C,EAAS,EAAM,YACf,EAAa,EAAO,gBACpB,EAAW,EAAO,cAClB,EAAoB,EAAQ,mBAAqB,EACjD,EAAmB,EAAQ,gBAAkB,EAC7C,EAAiB,KAAK,mBAAmB,EAAU,GACnD,EAAW,GACf,EACA,EACA,GAGI,EAAc,EAAO,qBACrB,EAAmB,EAAS,IAAI,AAAC,GAAM,MAErC,GAAM,EAAY,EAAE,MAAO,EAAG,SAC/B,GAGE,GACJ,MAAM,GACN,KAAK,AAAC,GAAM,EAAE,eACd,KAAK,AAAC,GAKE,EACL,SALe,GAAU,aAAa,EAAM,CAC5C,OAAQ,EAAE,OACV,kBAAmB,IAInB,OAAQ,EAAE,OACV,SAbG,QAAQ,OAAO,0BAkBpB,QAA4B,SAAQ,WAAW,IAClD,OAAO,AAAC,GAAM,EAAE,SAAW,aAC3B,IAAI,AAAC,GAAO,EAA6C,OAMtD,EAA4B,CAChC,CACE,gBAKE,EAAW,EAAQ,UAAY,IAC/B,EAAa,EAAQ,YAAc,GACnC,EACJ,EAAQ,kBAAqB,EAAa,EAAY,EAClD,EAAkB,EAAQ,iBAAmB,EAC7C,EAAqB,EAAM,mBAC3B,EAAe,EAAM,IAAI,WAEzB,EAAe,EAAM,eAAiB,GAAI,IAAW,GAAK,aAG1C,GAAY,IAAI,AAAC,GACrC,KAAK,WACH,EACA,EAAG,YACH,EACA,EACA,EACA,EACA,EACA,IAMN,WACE,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACa,MACP,GAAS,SAAS,cAAc,UAChC,EAAgB,KAAK,oBACzB,EACA,EACA,GAEI,EAAM,EAAO,WAAW,QAEd,QAAQ,AAAC,GAAO,MACxB,GAAY,GAChB,EACA,EAAO,MACP,EAAO,QAEL,EAAW,qBACR,wCACH,EAAG,SACH,EACA,EACA,EACA,QAGG,qCACH,EACA,EACA,EACA,EACA,EACA,EACA,UAKA,QACa,EAAI,EAAS,GAAU,EAAQ,IAChD,UAAU,aACL,CACL,OAAQ,EACR,QAAS,KAnZf,QAAA,EACS,gBAAkB,QChGd,IAAsB,GAMtB,GAAkB,MAKlB,GAAuB,GAAsB,cCTxD,EACA,EACA,EACQ,MACF,GAAU,EAAgB,EAC1B,EAAU,EAAiB,EAE3B,CAAC,EAAqB,GAAwB,EAC9C,EAAO,EAAU,EAAsB,EACvC,EAAO,EAAU,EAAuB,QACvC,CAAC,EAAM,EAAM,EAAO,EAAqB,EAAO,eAIvD,EACA,EACM,MAEA,GAAW,AADC,EAAM,OAAe,cACb,qBAAqB,UAEzC,EAAa,EAAM,WACnB,EAAgB,UACR,KAAK,GAAK,EAAW,YAAY,WAEzC,EAAiB,UACT,KAAK,GAAK,EAAW,YAAY,kBAGtC,GAAI,EAAS,OAAS,EAAG,GAAK,EAAG,IAAK,MAEvC,GAAS,EAAS,KAAK,GACvB,EAAU,EAAO,WAAW,SAE9B,EAAO,QAAU,GAAiB,EAAO,SAAW,EAAgB,MAEhE,GAAgB,EACpB,EACA,EACA,KAGM,cAGA,KAAK,EAAG,EAAG,EAAe,KAG1B,KACN,EAAc,GACd,EAAc,GACd,EAAW,GACX,EAAW,MAGL,UAAY,yBACZ,KAAK,wcsMC+B3B,KAAM,GAAW,CACf,KAAM,UACN,UAAW,GACX,aAAc,uBAIaC,GAAW,CAAjC,aAtCP,gDAwEkC,CAAC,IAAK,qBACjB,EAAI,cAMV,oBAGO,EAAS,0BAGL,EAAS,+BAGT,EAAS,aAEnC,iBAAiB,EAAwB,EAAmB,OACpD,GACH,KAAK,AAAC,GAAM,EAAE,QACd,KAAK,AAAC,GAAU,IACX,GAAW,EAAe,EAAgB,EAE1C,EAAM,UACI,EAAM,OAGd,EAAU,SAAS,UACT,GAAI,KAAI,EAAW,MAGjB,EAAU,WAAW,OAAO,WAC3B,EAAU,WAAW,OAAO,cAEvC,GACH,KAAK,AAAC,GAAM,EAAE,QACd,KAAK,AAAC,GAAM,EAAE,MACd,KAAK,AAAC,GAAe,GAElB,EACA,EACA,OAAO,KAAK,EAAM,SAAS,GAC3B,OACA,EACA,EACA,QAKJ,EACA,EACA,OAAO,KAAK,EAAM,SAAS,GAC3B,OACA,OACA,OACA,KAMV,WAAkB,MACX,iBAAmB,GAAI,IAAY,CAEtC,KAAQ,cACR,OAAQ,GAAI,IAAa,CACvB,SAAU,YAGT,IAAM,GAAI,IAAM,CACnB,OAAQ,KAAK,MACb,OAAQ,GACR,KAAM,GAAI,IAAK,CACb,KAAM,YAGL,gBAAkB,EAAS,eAC3B,WAAW,EAAS,WAEpB,IAAI,GAAG,cAAe,AAAC,GAAQ,MAC5B,GAAM,EAAI,WAAY,UAAU,cAElB,EAAK,KAAK,mBAAmB,WAE9C,IAAI,UAAU,GAAG,oBAAqB,IAAM,MAC1C,KAAO,KAAK,KAAK,UAAU,WAAa,UAE1C,KAAO,KAAK,KAAK,UAAU,WAAa,GAG/C,mBAAmB,EAA8B,OACxC,MAAK,sBAAsB,IAChC,AAAC,GACE,EAAO,GAAuB,EAAa,KAAK,WACjD,kBAIN,cAAqB,MACd,iBAGD,QAAuB,GAChB,gBAAkB,KAAK,qBAC5B,GAAU,GAAI,GACd,EAAiB,KAAK,IAAK,UAAU,gBACrC,EAAO,KAAK,IAAK,UAEjB,EAAK,EACT,KAAK,mBAAmB,GACxB,EAAK,GACL,EAAK,IAED,EAAsB,CAC1B,GAAG,KAAK,IAAK,uBAAuB,CAAC,EAAG,GAAI,EAAG,KAC/C,GAAG,KAAK,IAAK,uBAAuB,CAAC,EAAG,GAAI,EAAG,WAE5C,kBAAkB,YAAY,aAC9B,kBAAkB,YAAY,WACjC,GAAI,IAAQ,CACV,SAAUC,GAAkB,WAG1B,GAA8B,CAClC,iBAAkB,GAEd,EAAS,KAAM,GAAQ,eAC3B,KAAK,SACL,EACA,EACA,WAEM,IAAI,QACP,QAAU,EAAO,GAGxB,qBAA4B,MACrB,SAAW,GAAI,GAAgB,CAClC,UAAW,KAAK,gBAChB,MAAM,EAAS,OACT,GAAQ,eAAe,YAAc,QAChC,GAAI,GAAM,CACf,KAAM,GAAI,IAAK,CACb,KAAM,kBACN,KAAM,QACN,QAAS,KAEX,MAAO,GAAI,IAAK,CACd,IAAK,aACL,QAAS,GACT,MAAO,QAIN,GAAI,GAAM,CACf,OAAQ,GAAI,IAAO,CACjB,MAAO,WAIb,OAAQ,GAAI,GAAiB,CAC3B,OAAQ,GAAI,GACZ,IAAK,yBACL,QAAS,YAKP,GAAS,KAAK,KAAK,cACjB,aACF,GAAY,CAChB,GAAI,GAAU,CACZ,OAAQ,GAAI,MAEd,KAAK,SACL,KAAK,iBACL,GAAI,GAAU,CACZ,OAAQ,IACR,OAAQ,GAAI,GAAU,CACpB,SAAU,KAAK,SAAS,YAAY,qBAIlC,OAAO,QACV,KAAK,UAAU,UAAU,EAAW,CAAC,QAAS,YAGrD,sBAA6B,MACtB,oBACH,kEAEA,8DAIJ,sBAA6B,MACtB,oBACH,qEACA,8DAIJ,oBAAoB,EAAgB,EAAwB,MACpD,GAAS,GAAqB,aAC9B,EAAS,CAAC,EAAO,GAAI,EAAO,SAC7B,SAAW,GAAI,GAAgB,CAClC,UAAW,KAAK,gBAChB,OAAQ,GAAI,GAAiB,CAC3B,OAAQ,GAAI,GACZ,SAAU,GAAI,IAAS,CACrB,SAAU,IACV,YAAa,CACX,kBAAqB,kBAAqB,kBAC1C,kBAAqB,kBAAqB,mBAC1C,mBAAqB,kBAAqB,kBAC1C,kBAAmB,iBAAoB,kBACvC,mBAAqB,kBAAqB,kBAC1C,mBAAqB,GAEvB,SACA,WAEF,IAAK,EACL,QAAS,YAGR,iBAAiB,KAAK,SAAU,QAE/B,GAAS,KAAK,KAAK,cACjB,aACF,GAAY,CAChB,KAAK,SACL,KAAK,iBACL,GAAI,GAAU,CACZ,OAAQ,IACR,OAAQ,GAAI,GAAU,CACpB,SAAU,KAAK,SAAS,YAAY,qBAIlC,OAAO,QACV,KAAK,UAAU,UAAU,EAAW,CAAC,OAAQ,YAGpD,WAAW,EAAoB,aACxB,YAAc,EACX,OACD,cACE,gCAEF,eACE,iCAEF,eACE,8BAMX,QAAyB,IACnB,GAA2B,GAC3B,EAA8B,MAC9B,KAAK,QAAS,MACV,GAAI,KAAK,QAAQ,OACjB,EAAK,CAAC,EAAE,GAAI,EAAE,IACd,EAAK,CAAC,EAAE,GAAI,EAAE,MACdC,wBAA2B,KAAK,QAAQ,gBACrCA;AAAAA,UACL,KAAK,UAAU,EAAS,EAAI;AAAA,UAC5B,KAAK,UAAU,EAAS,EAAI;AAAA,oBAG3BA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,kBAKO,KAAK;AAAA,kBACL,AAAC,GAAQ,KAAK,WAAW,EAAI,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBASjC,KAAK;AAAA,oBACN,AAAC,GAAQ,MACZ,gBAAkB,EAAI,OAAO,aAC7B,WAAW,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAQZ,KAAK;AAAA,oBACN,AAAC,GAAQ,MACZ,gBAAkB,EAAI,OAAO;AAAA;AAAA;AAAA,aAIjC,GAAU;AAAA,mBACJ,KAAK,KAAK,QAAQ;AAAA;AAAA;AAAA,UAG3B;AAAA;AAAA,kCAEwB,KAAK;AAAA,UAC7BC,GAAW;AAAA;AAAA,QA5Vd,EACE,OAAS,CACdJ;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,MAuBA,IAIM,GADPK,GAAM,SACC,EAAA,qBASA,GADPC,KACO,EAAA,uBAGA,GADPA,KACO,EAAA,oBAGA,GADPA,KACO,EAAA,2BAGA,GADPA,KACO,EAAA,+BAGA,GADPA,KACO,EAAA,+BAlDH,KADNC,GAAc,aACR"}